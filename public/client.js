// Generated by CoffeeScript 1.6.2
(function() {
  var $touched, boxPadding, boxSize, canvas, ctx, doEnd, doMove, doStart, draw, force, forceTick, graphLoading, handleMove, handleTouch, initDraw, klyngeWalk, klynger, links, loadKlynge, nodes, pinned, px0, py0, qp, startSpread, startTime, titleCache, topLinks, touchedKlynge, update, updateKlynge, walkDepth, wasPinned, x0, y0,
    __slice = [].slice;

  boxSize = 60;

  boxPadding = 4;

  walkDepth = 30;

  startSpread = 4;

  topLinks = 5;

  klynger = {};

  nodes = [];

  links = [];

  pinned = {};

  window.bibgraph = {};

  qp = window.qp = window.qp || {};

  qp.prngSeed = Date.now();

  qp.prng = function(n) {
    return qp.prngSeed = (1664525 * (n === void 0 ? qp.prngSeed : n) + 1013904223) | 0;
  };

  qp.prng01 = function() {
    return (qp.prng() & 0x0fffffff) / 0x10000000;
  };

  qp.strHash = function(s) {
    var hash, i;

    hash = 5381;
    i = s.length;
    while (i) {
      hash = (hash * 31 + s.charCodeAt(--i)) | 0;
    }
    return hash;
  };

  qp.intToColor = function(i) {
    return "#" + ((i & 0xffffff) + 0x1000000).toString(16).slice(1);
  };

  qp.hashColorLight = function(s) {
    return qp.intToColor(0xe0e0e0 | qp.prng(1 + qp.strHash(s)));
  };

  qp.hashColorDark = function(s) {
    return qp.intToColor(0x7f7f7f & qp.prng(qp.strHash(s)));
  };

  qp.log = function() {
    var args;

    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return typeof qp._log === "function" ? qp._log.apply(qp, [document.title].concat(__slice.call(args))) : void 0;
  };

  qp.pick = function(arr, seed) {
    return arr[Math.abs(qp.prng(seed)) % arr.length];
  };

  qp.startsWith = function(str, match) {
    return str.slice(0, match.length) === match;
  };

  bibgraph.open = function(klyngeId) {
    console.log(location.hash, location.hash === "");
    if ((location.hash === "") || (qp.startsWith(location.hash, "#bibgraph:"))) {
      location.hash = "#bibgraph:" + klyngeId;
    }
    initDraw();
    pinned[klyngeId] = true;
    return update();
  };

  bibgraph.close = function(klyngeId) {
    var klynge, _;

    $("#bibgraphGraph").remove();
    for (_ in klynger) {
      klynge = klynger[_];
      klynge.div = void 0;
    }
    nodes = [];
    links = [];
    return pinned = {};
  };

  wasPinned = px0 = py0 = x0 = y0 = startTime = $touched = touchedKlynge = void 0;

  doStart = function(e, $elem, klynge, x, y) {
    if ($touched) {
      return;
    }
    touchedKlynge = klynge;
    px0 = touchedKlynge.px;
    py0 = touchedKlynge.py;
    $touched = $elem;
    x0 = x;
    y0 = y;
    startTime = Date.now();
    $touched.addClass("pinned");
    wasPinned = pinned[touchedKlynge.klynge];
    pinned[touchedKlynge.klynge] = true;
    touchedKlynge.fixed = true;
    if (!wasPinned) {
      update();
    }
    e.preventDefault();
    return true;
  };

  doMove = function(e, x, y) {
    if (!$touched) {
      return;
    }
    touchedKlynge.px = px0 + x - x0;
    touchedKlynge.py = py0 + y - y0;
    force.start();
    e.preventDefault();
    return true;
  };

  doEnd = function(e, x, y) {
    var dist, dx, dy;

    if (!$touched) {
      return;
    }
    dx = x - x0;
    dy = y - y0;
    dist = Math.sqrt(dx * dx + dy * dy);
    if (wasPinned && dist < boxSize && (startTime + 500) > Date.now()) {
      pinned[touchedKlynge.klynge] = false;
      touchedKlynge.fixed = false;
      $touched.removeClass("pinned");
      update();
    }
    $touched = void 0;
    e.preventDefault();
    return true;
  };

  handleMove = function($elem) {
    $elem.on("mouseup", function(e) {
      return doEnd(e, e.screenX, e.screenY);
    });
    return $elem.on("mousemove", function(e) {
      return doMove(e, e.screenX, e.screenY);
    });
  };

  handleTouch = function($elem, klynge) {
    handleMove($elem);
    return $elem.on("mousedown", function(e) {
      return doStart(e, $elem, klynge, e.screenX, e.screenY);
    });
  };

  ctx = void 0;

  canvas = void 0;

  force = void 0;

  initDraw = function() {
    var $canvas, h, w;

    force = d3.layout.force();
    force.size([window.innerWidth, window.innerHeight]);
    force.on("tick", forceTick);
    force.charge(-400);
    force.linkDistance(150);
    force.linkStrength(0.3);
    force.gravity(0.1);
    if (!($("#bibgraphGraph")).length) {
      ($("body")).append($('<div id="bibgraphGraph"></div>'));
    }
    $("#bibgraphGraph").empty();
    $canvas = $("<canvas></canvas>");
    $("#bibgraphGraph").append($canvas);
    canvas = $canvas[0];
    ctx = canvas.getContext("2d");
    $canvas.css({
      position: "absolute",
      top: 0,
      left: 0
    });
    $canvas.on("click", function(e) {
      return bibgraph.close();
    });
    handleMove($canvas);
    w = window.innerWidth;
    h = window.innerHeight;
    ctx.width = canvas.width = w;
    ctx.height = canvas.height = h;
    canvas.style.width = w + "px";
    return canvas.style.heiht = h + "px";
  };

  draw = function() {
    var $div, klynge, _i, _len;

    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      klynge = nodes[_i];
      if (!klynge.div) {
        $div = $("<div></div>");
        $div.addClass("bibgraphBox");
        if (pinned[klynge.klynge]) {
          $div.addClass("pinned");
        }
        $div.data("klynge", klynge);
        $div.css({
          width: boxSize - 2 * boxPadding,
          padding: boxPadding,
          borderRadius: boxPadding,
          height: boxSize - 2 * boxPadding
        });
        handleTouch($div, klynge);
        $("#bibgraphGraph").append($div);
        bibgraph.boxContent($div[0], klynge.faust);
        klynge.div = $div[0];
      }
    }
    force.nodes(nodes);
    force.links(links);
    return force.start();
  };

  forceTick = function() {
    var klynge, link, _i, _j, _len, _len1;

    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      klynge = nodes[_i];
      if (klynge.div) {
        klynge.div.style.top = klynge.y + "px";
        klynge.div.style.left = klynge.x + "px";
      }
    }
    ctx.lineWidth = 0.3;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    for (_j = 0, _len1 = links.length; _j < _len1; _j++) {
      link = links[_j];
      if (link.source.div && link.target.div) {
        ctx.moveTo(link.source.x + boxSize / 2, link.source.y + boxSize / 2);
        ctx.lineTo(link.target.x + boxSize / 2, link.target.y + boxSize / 2);
      }
    }
    return ctx.stroke();
  };

  graphLoading = false;

  klyngeWalk = function(klyngeId, n, callback, done, acc) {
    if (n <= 0) {
      return done();
    }
    if (acc == null) {
      acc = {
        arr: [],
        added: {},
        salt: qp.strHash(klyngeId),
        skip: {},
        startSpread: startSpread
      };
    }
    return loadKlynge(klyngeId, function(klynge) {
      var branch, child, hash, i, p, pos, _i, _j, _len, _ref, _ref1;

      if (klynge.klynge) {
        acc.arr.push(klynge);
        acc.added[klyngeId] = true;
        if ((_ref = klynge.children) == null) {
          klynge.children = {};
        }
      } else {
        acc.skip[klyngeId] = true;
      }
      hash = acc.salt + qp.strHash(klyngeId);
      for (i = _i = 0; _i <= 30; i = ++_i) {
        branch = qp.pick(acc.arr, hash);
        if (acc.startSpread > 0) {
          branch = acc.arr[0];
          acc.startSpread--;
        }
        p = qp.prng01();
        pos = p * p * p * p * branch.adhl.length | 0;
        console.log(pos);
        if (branch.adhl) {
          _ref1 = branch.adhl.slice(pos);
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            child = _ref1[_j];
            if (!acc.added[child.klynge] && !acc.skip[child.klynge]) {
              branch.children[child.klynge] = true;
              acc.prev = branch.klynge;
              if (klynge.klynge) {
                callback(klynge);
              }
              return klyngeWalk(child.klynge, n - 1, callback, done, acc);
            }
          }
        }
        hash = qp.prng(hash);
      }
      return callback(klynge);
    });
  };

  loadKlynge = function(klyngeId, callback) {
    if (klynger[klyngeId]) {
      return callback(klynger[klyngeId]);
    }
    return $.get("klynge/" + klyngeId, function(klynge) {
      var _ref;

      if (typeof klynge !== "object") {
        klynge = {
          raw: klynge
        };
      }
      klynger[klyngeId] = klynge;
      if ((_ref = klynge.adhl) != null) {
        _ref.sort(function(a, b) {
          return b.count * b.count / b.klyngeCount - a.count * a.count / a.klyngeCount;
        });
      }
      if (klynge.faust) {
        updateKlynge(klynge);
      }
      return callback(klynge);
    });
  };

  updateKlynge = function(klynge) {
    return $.get("faust/" + klynge.faust[0], function(faust) {
      klynge.title = faust.title;
      return draw();
    });
  };

  update = function() {
    var addLink, depth, done, handleResult, isPinned, klyngeId, linkHash, nodeHash, toWalk;

    nodes = [];
    links = [];
    nodeHash = {};
    linkHash = {};
    addLink = function(a, b) {
      var _ref;

      if (a > b) {
        _ref = [b, a], a = _ref[0], b = _ref[1];
      }
      if (!nodeHash[a] || !nodeHash[b] || linkHash[[a, b]]) {
        return;
      }
      linkHash[[a, b]] = true;
      return links.push({
        source: nodeHash[a],
        target: nodeHash[b]
      });
    };
    handleResult = function(klynge) {
      var child, id, _i, _j, _len, _len1, _ref;

      id = klynge.klynge;
      if (!id) {
        return;
      }
      if (!nodeHash[id]) {
        nodeHash[id] = klynge;
        nodes.push(klynge);
        _ref = klynge.adhl.slice(0, topLinks);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          klynge.children[child.klynge] = true;
          addLink(id, child.klynge);
        }
      }
      for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
        klynge = nodes[_j];
        if (klynge.children[id]) {
          addLink(klynge.klynge, id);
        }
      }
      return draw();
    };
    done = function() {
      var child, klynge, _, _i, _j, _len, _len1, _ref, _results;

      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        klynge = nodes[_i];
        _ref = klynge.children;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          child = _ref[_j];
          addLink(klynge.klynge, child);
        }
      }
      draw();
      _results = [];
      for (_ in klynger) {
        klynge = klynger[_];
        if (klynge.div && !nodeHash[klynge.klynge]) {
          ($(klynge.div)).remove();
          _results.push(klynge.div = void 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    toWalk = [];
    for (klyngeId in pinned) {
      isPinned = pinned[klyngeId];
      if (isPinned) {
        toWalk.push(klyngeId);
      }
    }
    if (!toWalk.length) {
      return bibgraph.close();
    }
    depth = walkDepth / Math.log(toWalk.length + 1.7);
    console.log(depth);
    return async.map(toWalk, (function(id, done) {
      return klyngeWalk(id, depth, handleResult, done);
    }), done);
  };

  titleCache = {};

  bibgraph.boxContent = function(elem, fausts) {
    var faust, title;

    faust = fausts[0];
    title = titleCache[faust];
    elem.innerHTML = "?";
    if (title !== void 0) {
      return elem.innerHTML = "<span>" + title + "</span>";
    }
    return $.get("faust/" + faust, function(obj) {
      var $div, size;

      title = obj.title;
      titleCache[faust] = title;
      elem.innerHTML = "<span>" + title + "</span>";
      $div = $(elem);
      size = 12;
      while ($div.height() > boxSize && size > 8) {
        --size;
        $div.css({
          fontSize: size
        });
      }
      return $div.css({
        height: boxSize
      });
    });
  };

  bibgraph.update = function() {
    return ($(".bibgraphRequest")).each(function() {
      var $elem;

      $elem = $(this);
      if (!$elem.hasClass("bibgraphRequestLoading")) {
        $elem.addClass("bibgraphRequestLoading");
        return $.get("faust/" + $elem.data("faust"), function(faust) {
          return $.get("klynge/" + faust.klynge, function(klynge) {
            $elem.removeClass("bibgraphRequestLoading");
            $elem.removeClass("bibgraphRequest");
            if (klynge != null ? klynge.adhl : void 0) {
              $elem.addClass("bibgraphEnabled");
              $elem.on("mousedown", function() {
                return bibgraph.open(faust.klynge);
              });
              return $elem.on("touchstart", function() {
                return bibgraph.open(faust.klynge);
              });
            } else {
              return $elem.addClass("bibgraphDisabled");
            }
          });
        });
      }
    });
  };

  $(bibgraph.update);

}).call(this);
