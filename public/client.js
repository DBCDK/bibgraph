// Generated by CoffeeScript 1.6.2
(function() {
  var $graph, addMenu, divWidth, draw, edgeTry, existing, expand, klynger, movingKlynge, movingMouseMove, movingX, movingX0, movingY, movingY0, nNodes, pick, qp, requestKlynge, reset, search, start, stopMoving, update, _pickN;

  nNodes = 100;

  edgeTry = 20;

  klynger = [];

  divWidth = 60;

  qp = window.qp || {};

  qp.prngSeed = Date.now();

  qp.prng = function(n) {
    return qp.prngSeed = (1664525 * (n === void 0 ? qp.prngSeed : n) + 1013904223) | 0;
  };

  qp.strhash = function(s) {
    var hash, i;

    hash = 5381;
    i = s.length;
    while (i) {
      hash = (hash * 31 + s.charCodeAt(--i)) | 0;
    }
    return hash;
  };

  qp.intToColor = function(i) {
    return "#" + ((i & 0xffffff) + 0x1000000).toString(16).slice(1);
  };

  qp.hashColorLight = function(s) {
    return qp.intToColor(0xe0e0e0 | qp.prng(1 + qp.strhash(s)));
  };

  qp.hashColorDark = function(s) {
    return qp.intToColor(0x7f7f7f & qp.prng(qp.strhash(s)));
  };

  movingKlynge = void 0;

  movingX = 0;

  movingY = 0;

  movingX0 = 0;

  movingY0 = 0;

  addMenu = function($elem, klynge) {
    var elem;

    elem = $elem[0];
    return elem.addEventListener("mousedown", function(e) {
      if (movingKlynge) {
        return;
      }
      e.preventDefault();
      movingKlynge = klynge;
      movingX0 = movingX = e.x;
      movingY0 = movingY = e.y;
      klynge.fixed = true;
      showMenuItems();
      return true;
    });
  };

  stopMoving = function(e) {
    e.preventDefault();
    if (movingKlynge) {
      movingKlynge.fixed = movingKlynge.pinned;
    }
    movingKlynge = void 0;
    return true;
  };

  movingMouseMove = function(e) {
    var dx, dy, klynge;

    if (!movingKlynge) {
      return;
    }
    klynge = movingKlynge;
    e.preventDefault();
    dx = e.x - movingX;
    dy = e.y - movingY;
    klynge.x += dx;
    klynge.y += dy;
    klynge.px += dx;
    klynge.py += dy;
    movingX += dx;
    movingY += dy;
    console.log(klynge.x, klynge.px, movingX);
    force.start();
    return true;
  };

  $(function() {
    window.addEventListener("mousemove", movingMouseMove);
    window.addEventListener("mouseup", stopMoving);
    return window.addEventListener("mouseleave", stopMoving);
  });

  draw = function() {
    var $div, a, b, edges, force, h, i, idx, klynge, link, n, node, size, svg, updateForce, w, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1;

    klynger = klynger.reverse();
    w = window.innerWidth;
    h = window.innerHeight;
    window.force = force = d3.layout.force();
    document.getElementById("graph").innerHTML = "";
    svg = d3.select("#graph").append("svg");
    svg.attr("width", w);
    svg.attr("height", h);
    for (i = _i = 0, _ref = klynger.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      klynger[i].index = i;
    }
    for (_j = 0, _len = klynger.length; _j < _len; _j++) {
      klynge = klynger[_j];
      klynge.label = String(klynge.title).replace("&amp;", "&").replace(/&#([0-9]*);/g, function(_, n) {
        return String.fromCharCode(n);
      });
      klynge.label = "";
    }
    idx = {};
    for (_k = 0, _len1 = klynger.length; _k < _len1; _k++) {
      klynge = klynger[_k];
      idx[klynge.klynge] = klynge.index;
    }
    edges = [];
    for (_l = 0, _len2 = klynger.length; _l < _len2; _l++) {
      a = klynger[_l];
      _ref1 = a.adhl.slice(0, edgeTry);
      for (_m = 0, _len3 = _ref1.length; _m < _len3; _m++) {
        b = _ref1[_m];
        if (typeof idx[b.klynge] === "number") {
          edges.push({
            source: a.index,
            target: idx[b.klynge]
          });
        }
      }
    }
    link = svg.selectAll(".link").data(edges).enter().append("line").attr("class", "link").style("stroke", "#999").style("stroke-width", 1);
    node = svg.selectAll(".node").data(klynger).enter().append("text").style("font", "12px sans-serif").style("text-anchor", "middle").style("text-shadow", "1px 1px 0px white, -1px -1px 0px white, 1px -1px 0px white, -1px 1px 0px white").attr("class", "node").call(force.drag);
    for (_n = 0, _len4 = klynger.length; _n < _len4; _n++) {
      klynge = klynger[_n];
      klynge.title = "" + klynge.title;
      $div = $("<div>" + klynge.title + "</div>");
      $div.data("klynge", klynge);
      $div.css({
        position: "absolute",
        width: divWidth,
        font: "100px sans serif",
        textAlign: "center",
        color: qp.hashColorDark(klynge.title),
        background: qp.hashColorLight(klynge.title),
        hyphens: "auto",
        MozHyphens: "auto",
        WebkitHyphens: "auto",
        overflow: "hidden",
        boxShadow: "3px 3px 8px rgba(0, 0, 0, 0.5)",
        padding: 4,
        borderRadius: 4
      });
      $("body").append($div);
      size = 12;
      addMenu($div, klynge);
      while ($div.height() > divWidth && size > 8) {
        --size;
        $div.css({
          fontSize: size
        });
      }
      $div.css({
        height: divWidth
      });
      klynge.div = $div[0];
    }
    n = 0;
    updateForce = function() {
      var _len5, _o;

      for (_o = 0, _len5 = klynger.length; _o < _len5; _o++) {
        klynge = klynger[_o];
        klynge.div.style.top = klynge.y + "px";
        klynge.div.style.left = (klynge.x - divWidth / 2) + "px";
      }
      link.attr("x1", function(d) {
        return d.source.x;
      }).attr("y1", function(d) {
        return d.source.y;
      }).attr("x2", function(d) {
        return d.target.x;
      }).attr("y2", function(d) {
        return d.target.y;
      });
      return node.attr("x", function(d) {
        return d.x;
      }).attr("y", function(d) {
        return d.y + 2;
      }).text(function(d) {
        return d.label || d._id;
      });
    };
    force.size([w, h]);
    force.on("tick", function() {
      return updateForce();
    });
    force.nodes(klynger);
    force.links(edges);
    force.charge(-400);
    force.linkDistance(120);
    force.linkStrength(0.3);
    force.gravity(0.1);
    return force.start();
  };

  reset = function() {
    var existing, _pickN;

    existing = {};
    _pickN = 0;
    return window.klynger = klynger = [];
  };

  start = function(done) {
    if (klynger.length) {
      expand(done);
    }
    return update();
  };

  _pickN = 1;

  pick = function(arr) {
    _pickN = qp.prng(_pickN);
    return arr[(_pickN & 0x7fffffff) % arr.length];
  };

  existing = {};

  expand = function(done) {
    var child, i, klynge, _i, _j, _k, _len, _len1, _ref;

    if (klynger.length >= nNodes) {
      return typeof done === "function" ? done() : void 0;
    }
    for (_i = 0, _len = klynger.length; _i < _len; _i++) {
      klynge = klynger[_i];
      existing[klynge.klynge] = true;
    }
    for (i = _j = 0; _j <= 20; i = ++_j) {
      klynge = klynger[Math.random() * klynger.length | 0];
      klynge = pick(klynger);
      _ref = klynge.adhl;
      for (_k = 0, _len1 = _ref.length; _k < _len1; _k++) {
        child = _ref[_k];
        if (!existing[child.klynge]) {
          existing[child.klynge] = true;
          return requestKlynge(child.klynge, function() {
            return expand(done);
          });
        }
      }
    }
  };

  requestKlynge = function(klyngeId, done) {
    return $.get("klynge/" + klyngeId, function(klynge) {
      var _ref;

      if (!klynge.faust) {
        return typeof done === "function" ? done() : void 0;
      }
      klynger.push(klynge);
      if ((_ref = klynge.adhl) != null) {
        _ref.sort(function(a, b) {
          return b.count * b.count / b.klyngeCount - a.count * a.count / a.klyngeCount;
        });
      }
      return $.get("faust/" + klynge.faust[0], function(faust) {
        klynge.title = faust.title;
        update();
        return typeof done === "function" ? done() : void 0;
      });
    });
  };

  $graph = void 0;

  $(function() {
    return $graph = $("#graph");
  });

  update = function() {
    var klynge, _i, _len, _results;

    $graph.empty();
    klynger = klynger.filter(function(klynge) {
      return klynge.adhl;
    });
    _results = [];
    for (_i = 0, _len = klynger.length; _i < _len; _i++) {
      klynge = klynger[_i];
      _results.push($graph.append("<span> &nbsp; " + klynge.title + " " + klynge.count + "</span>"));
    }
    return _results;
  };

  search = function() {
    var query;

    reset();
    query = ($("#query")).css({
      display: "none"
    }).val();
    location.hash = query;
    klynger = [];
    qp.log("search", query);
    return $.get("search/" + query, function(result) {
      ($("#query")).css({
        display: "inline"
      }).val("");
      return async.map(result, function(faust, done) {
        return $.get("faust/" + faust, function(faust) {
          if (faust != null ? faust.klynge : void 0) {
            return requestKlynge(faust != null ? faust.klynge : void 0, done);
          } else {
            return done();
          }
        });
      }, function() {
        var klynge, max, _i, _len;

        return start(function() {
          return draw();
        });
        klynger = klynger.slice(0, 1);
        return start(function() {
          return draw();
        });
        max = {
          count: 0
        };
        for (_i = 0, _len = klynger.length; _i < _len; _i++) {
          klynge = klynger[_i];
          if (max.count <= klynge.count) {
            max = klynge;
          }
        }
        klynger = [max];
        console.log("root:", max);
        return start(function() {
          return console.log("done");
        });
      });
    });
  };

  $(function() {
    ($("#search")).on("submit", function() {
      search();
      return false;
    });
    if (location.hash) {
      ($("#query")).val(location.hash.slice(1));
      search();
    }
    return ($("#search")).focus();
  });

}).call(this);
