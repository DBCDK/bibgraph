// Generated by CoffeeScript 1.6.2
(function() {
  var $graph, expand, klynger, requestKlynge, reset, search, start, update;

  klynger = [];

  reset = function() {
    return window.klynger = klynger = [];
  };

  start = function() {
    if (klynger.length) {
      expand();
    }
    return update();
  };

  expand = function() {
    var child, i, klynge, _i, _j, _len, _ref;

    if (klynger.length > 4) {
      return;
    }
    for (i = _i = 0; _i <= 10; i = ++_i) {
      klynge = klynger[Math.random() * klynger.length | 0];
      _ref = klynge.adhl;
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        child = _ref[_j];
        if (!existing[child.klynge]) {
          console.log(existing, child.klynge);
          return requestKlynge(child.klynge, expand);
        }
      }
    }
  };

  expand = function() {
    var child, existing, klynge, _i, _j, _len, _len1, _ref;

    if (klynger.length > 4) {
      return;
    }
    existing = {};
    for (_i = 0, _len = klynger.length; _i < _len; _i++) {
      klynge = klynger[_i];
      existing[klynge.klynge] = true;
    }
    klynge = klynger[Math.random() * klynger.length | 0];
    _ref = klynge.adhl;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      child = _ref[_j];
      if (!existing[child.klynge]) {
        console.log("found", existing, child, JSON.stringify(klynger.map(function(k) {
          return k.klynge;
        })));
        return requestKlynge(child.klynge, expand);
      }
    }
  };

  requestKlynge = function(klyngeId, done) {
    return $.get("klynge/" + klyngeId, function(klynge) {
      console.log(klyngeId, klynge);
      if (!klynge.faust) {
        return typeof done === "function" ? done() : void 0;
      }
      klynger.push(klynge);
      return $.get("faust/" + klynge.faust[0], function(faust) {
        klynge.title = faust.title;
        update();
        return typeof done === "function" ? done() : void 0;
      });
    });
  };

  $graph = void 0;

  $(function() {
    return $graph = $("#graph");
  });

  update = function() {
    var klynge, _i, _len, _results;

    $graph.empty();
    klynger = klynger.filter(function(klynge) {
      return klynge.adhl;
    });
    _results = [];
    for (_i = 0, _len = klynger.length; _i < _len; _i++) {
      klynge = klynger[_i];
      _results.push($graph.append("<span> &nbsp; " + klynge.title + " " + klynge.count + "</span>"));
    }
    return _results;
  };

  search = function() {
    var query;

    reset();
    query = ($("#query")).css({
      display: "none"
    }).val();
    location.hash = query;
    klynger = [];
    qp.log("search", query);
    return $.get("search/" + query, function(result) {
      ($("#query")).css({
        display: "inline"
      }).val("");
      return async.map(result, function(faust, done) {
        return $.get("faust/" + faust, function(faust) {
          if (faust != null ? faust.klynge : void 0) {
            return requestKlynge(faust != null ? faust.klynge : void 0, done);
          } else {
            return done();
          }
        });
      }, function() {
        var klynge, max, _i, _len;

        max = {
          count: 0
        };
        for (_i = 0, _len = klynger.length; _i < _len; _i++) {
          klynge = klynger[_i];
          if (max.count <= klynge.count) {
            max = klynge;
          }
        }
        klynger = [max];
        console.log("root:", max);
        return start();
      });
    });
  };

  $(function() {
    ($("#search")).on("submit", function() {
      search();
      return false;
    });
    if (location.hash) {
      ($("#query")).val(location.hash.slice(1));
      return search();
    }
  });

}).call(this);
